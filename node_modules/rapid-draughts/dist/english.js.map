{"version":3,"file":"english.js","sources":["../src/core/utils.ts","../src/core/game.ts","../src/english/utils.ts","../src/english/mask.ts","../src/english/move-generation.ts","../src/english/engine.ts","../src/english/game.ts","../src/computer/computer.ts","../src/computer/alpha-beta.ts","../src/computer/random.ts","../src/english/computer.ts"],"sourcesContent":["import { Bitboard, DraughtsEngineMove, DraughtsPlayer } from './engine';\nimport { DraughtsBoard1D, DraughtsMove1D } from './game';\n\nexport function compareMove(\n  moveA: DraughtsEngineMove<Bitboard>,\n  moveB: DraughtsEngineMove<Bitboard>\n): boolean {\n  return (\n    moveA.origin === moveB.origin &&\n    moveA.destination === moveB.destination &&\n    moveA.captures === moveB.captures\n  );\n}\n\nexport function compareCaptures1D(\n  capturesA: number[],\n  capturesB: number[]\n): boolean {\n  if (capturesA.length !== capturesB.length) {\n    return false;\n  }\n  for (const [i, element] of capturesA.entries()) {\n    if (element !== capturesB[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport function comparePartialMove1D(\n  moveA: DraughtsMove1D,\n  moveB: Partial<DraughtsMove1D>\n): boolean {\n  if (moveB.origin && moveA.origin !== moveB.origin) {\n    return false;\n  }\n  if (moveB.destination && moveA.destination !== moveB.destination) {\n    return false;\n  }\n  if (moveB.captures && !compareCaptures1D(moveA.captures, moveB.captures)) {\n    return false;\n  }\n  return true;\n}\n\nexport function formatBoard(board: DraughtsBoard1D) {\n  const boardSize = Math.floor(Math.sqrt(board.length));\n  const div = '-'.repeat(1 + boardSize * 4);\n  let str = `${div}\\n`;\n\n  for (const [ref, square] of board.entries()) {\n    // is start of row\n    if (ref % boardSize === 0) {\n      str += `|`;\n    }\n\n    // output square\n    if (square.piece) {\n      let char = square.piece.player === DraughtsPlayer.LIGHT ? 'x' : 'o';\n      char = square.piece.king ? char.toUpperCase() : char;\n      str += ` ${char} |`;\n    } else {\n      str += '   |';\n    }\n\n    // is end of row\n    if (ref % boardSize === boardSize - 1) {\n      str += ` \\n${div}\\n`;\n    }\n  }\n\n  return str;\n}\n","import { DraughtsPlayer } from './engine';\nimport type {\n  Bitboard,\n  DraughtsEngine,\n  DraughtsEngineBoard,\n  DraughtsEngineMove,\n  DraughtsStatus,\n} from './engine';\nimport { formatBoard } from './utils';\n\nexport type DraughtsPiece1D = {\n  readonly king: boolean;\n  readonly player: DraughtsPlayer;\n};\n\nexport type DraughtsDarkSquare1D = {\n  readonly piece: DraughtsPiece1D | undefined;\n  readonly position: number;\n  readonly dark: true;\n};\n\nexport type DraughtsLightSquare1D = {\n  readonly piece: undefined;\n  readonly position: undefined;\n  readonly dark: false;\n};\n\nexport type DraughtsSquare1D = DraughtsLightSquare1D | DraughtsDarkSquare1D;\n\nexport type DraughtsBoard1D = DraughtsSquare1D[];\n\nexport type DraughtsMove1D = {\n  readonly origin: number;\n  readonly destination: number;\n  readonly captures: number[];\n};\n\nexport type DraughtsGameHistory1D = {\n  moves: DraughtsMove1D[];\n  boards: DraughtsBoard1D[];\n};\n\nexport type DraughtsAdapter1D<T extends Bitboard> = {\n  toMove1D: (engineMove: DraughtsEngineMove<T>) => DraughtsMove1D;\n  toEngineMove: (move1D: DraughtsMove1D) => DraughtsEngineMove<T>;\n  toBoard1D: (engineBoard: DraughtsEngineBoard<T>) => DraughtsBoard1D;\n};\n\nexport class DraughtsGame1D<T extends Bitboard, E> {\n  engine: DraughtsEngine<T, E>;\n  history: DraughtsGameHistory1D;\n\n  private _board: DraughtsBoard1D | undefined;\n  private _moves: DraughtsMove1D[] | undefined;\n\n  private readonly adapter: DraughtsAdapter1D<T>;\n\n  constructor(\n    engine: DraughtsEngine<T, E>,\n    history: DraughtsGameHistory1D,\n    adapter: DraughtsAdapter1D<T>\n  ) {\n    this.engine = engine;\n    this.history = history;\n    this.adapter = adapter;\n  }\n\n  /**\n   * Get the status of the game\n   */\n  get status(): DraughtsStatus {\n    return this.engine.status;\n  }\n\n  /**\n   * Get the current player to move\n   */\n  get player(): DraughtsPlayer {\n    return this.engine.data.player;\n  }\n\n  /**\n   * Get the 1D array representation of the current board\n   */\n  get board(): DraughtsBoard1D {\n    return (this._board ??= this.adapter.toBoard1D(this.engine.data.board));\n  }\n\n  /**\n   * Get the available moves in 1D representation\n   */\n  get moves(): DraughtsMove1D[] {\n    return (this._moves ??= this.engine.moves.map((engineMove) =>\n      this.adapter.toMove1D(engineMove)\n    ));\n  }\n\n  /**\n   * Check if a move is valid\n   * @param move The move to check in 1D representation\n   * @returns True if the move is valid, false otherwise.\n   */\n  isValidMove(move: DraughtsMove1D) {\n    const engineMove = this.adapter.toEngineMove(move);\n    return this.engine.isValidMove(engineMove);\n  }\n\n  /**\n   * Make a move using the 1D representation of a move\n   * @param move The move to make in 1D representation\n   */\n  move(move: DraughtsMove1D) {\n    if (!this.isValidMove(move)) {\n      throw new Error(`invalid move: ${JSON.stringify(move)}`);\n    }\n\n    this.history.boards.push(this.board);\n    this.history.moves.push(move);\n\n    const engineMove = this.adapter.toEngineMove(move);\n    this.engine.move(engineMove);\n\n    this._board = undefined;\n    this._moves = undefined;\n  }\n\n  asciiBoard() {\n    return formatBoard(this.board);\n  }\n}\n","const BITS = 32;\n\nconst EnglishDraughtsBitSquare: Record<number, number> = [];\nEnglishDraughtsBitSquare[0] = 1;\nfor (let index = 1; index < BITS; index++) {\n  EnglishDraughtsBitSquare[index] = EnglishDraughtsBitSquare[index - 1] * 2;\n}\nexport { EnglishDraughtsBitSquare };\n\nconst BIT_MASK = 0xff_ff_ff_ff;\n\nexport function rotRight(value: number, r: number): number {\n  const rotation = r % BITS;\n  const applied =\n    (value >>> rotation) | ((value << (BITS - rotation)) & BIT_MASK);\n  return applied >>> 0;\n}\n\nexport function rotLeft(value: number, r: number): number {\n  const rotation = r % BITS;\n  const applied =\n    ((value << rotation) & BIT_MASK) | (value >>> (BITS - rotation));\n  return applied >>> 0;\n}\n\nexport function decomposeBits(value: number): number[] {\n  const split: number[] = [];\n  for (let bit = 1; value; bit <<= 1) {\n    if (value & bit) {\n      split.push(bit >>> 0);\n      value ^= bit;\n    }\n  }\n  return split;\n}\n\nexport function cardinality(num: number): number {\n  num = num - ((num >>> 1) & 0x55_55_55_55);\n  num = (num & 0x33_33_33_33) + ((num >>> 2) & 0x33_33_33_33);\n  num = (((num + (num >>> 4)) & 0x0f_0f_0f_0f) * 0x01_01_01_01) >>> 24;\n  return num;\n}\n","import { EnglishDraughtsBitSquare as S } from './utils';\n\n/* We use the following bitboard layout for English Draughts\n *\n *   11  05  31  25\n * 10  04  30  24\n *   03  29  23  17\n * 02  28  22  16\n *   27  21  15  09\n * 26  20  14  08\n *   19  13  07  01\n * 18  12  06  00\n *\n * Access the uint32 value of a square with S[n]\n *\n * A move forward to the left is a rotate left 7 bits.\n * A move forward to the right is a rotate left 1 bit.\n */\n\nconst BOARD =\n  S[11] |\n  S[5] |\n  S[31] |\n  S[25] |\n  S[10] |\n  S[4] |\n  S[30] |\n  S[24] |\n  S[3] |\n  S[29] |\n  S[23] |\n  S[17] |\n  S[2] |\n  S[28] |\n  S[22] |\n  S[16] |\n  S[27] |\n  S[21] |\n  S[15] |\n  S[9] |\n  S[26] |\n  S[20] |\n  S[14] |\n  S[8] |\n  S[9] |\n  S[3] |\n  S[7] |\n  S[1] |\n  S[18] |\n  S[12] |\n  S[6] |\n  S[0];\n\nconst RANK_0 = S[18] | S[12] | S[6] | S[0];\nconst RANK_1 = S[19] | S[13] | S[7] | S[1];\nconst RANK_2 = S[26] | S[20] | S[14] | S[8];\n\nconst RANK_5 = S[3] | S[29] | S[23] | S[17];\nconst RANK_6 = S[10] | S[4] | S[30] | S[24];\nconst RANK_7 = S[11] | S[5] | S[31] | S[25];\n\nconst FILE_0 = S[18] | S[26] | S[2] | S[10];\nconst FILE_7 = S[1] | S[9] | S[17] | S[25];\n\nconst FORWARD_LEFT = ~(RANK_7 | FILE_0);\nconst FORWARD_RIGHT = ~(RANK_7 | FILE_7);\nconst BACKWARD_LEFT = ~(RANK_0 | FILE_0);\nconst BACKWARD_RIGHT = ~(RANK_0 | FILE_7);\n\nconst LIGHT_START = RANK_0 | RANK_1 | RANK_2;\nconst DARK_START = RANK_5 | RANK_6 | RANK_7;\n\nconst MIDDLE_TWO_RANK_FOUR_FILE = S[21] | S[28] | S[22];\nconst MIDDLE_FOUR_RANK_TWO_FILE = S[29] | S[22] | S[21] | S[14];\n\nconst Mask = {\n  BOARD,\n  RANK_0,\n  RANK_1,\n  RANK_2,\n  RANK_5,\n  RANK_6,\n  RANK_7,\n  FILE_0,\n  FILE_7,\n  FORWARD_LEFT,\n  FORWARD_RIGHT,\n  BACKWARD_LEFT,\n  BACKWARD_RIGHT,\n  LIGHT_START,\n  DARK_START,\n  MIDDLE_FOUR_RANK_TWO_FILE,\n  MIDDLE_TWO_RANK_FOUR_FILE,\n};\n\nexport default Mask;\n","import {\n  DraughtsEngineBoard,\n  DraughtsEngineMove,\n  DraughtsPlayer,\n} from '../core/engine';\nimport Mask from './mask';\nimport { rotLeft, rotRight } from './utils';\n\nexport type EnglishDraughtsBoardIntermediates = {\n  forward: number;\n  backward: number;\n  opponent: number;\n  empty: number;\n};\n\nexport class EnglishDraughtsMoveGenerator {\n  private forward: number;\n  private backward: number;\n  private opponent: number;\n  private empty: number;\n\n  constructor(args: {\n    forward: number;\n    backward: number;\n    opponent: number;\n    empty: number;\n  }) {\n    this.forward = args.forward;\n    this.backward = args.backward;\n    this.opponent = args.opponent;\n    this.empty = args.empty;\n  }\n\n  static fromPlayerAndBoard(\n    player: DraughtsPlayer,\n    board: DraughtsEngineBoard<number>\n  ) {\n    const forward =\n      player === DraughtsPlayer.LIGHT ? board.light : board.dark & board.king;\n    const backward =\n      player === DraughtsPlayer.LIGHT ? board.light & board.king : board.dark;\n    const opponent = player === DraughtsPlayer.LIGHT ? board.dark : board.light;\n    const empty = ~(board.light | board.dark);\n\n    return new EnglishDraughtsMoveGenerator({\n      forward,\n      backward,\n      opponent,\n      empty,\n    });\n  }\n\n  getJumpers(): number {\n    let capture = rotRight(this.empty, 7) & (this.opponent & Mask.FORWARD_LEFT);\n    let jumpers = rotRight(capture, 7) & (this.forward & Mask.FORWARD_LEFT);\n\n    capture = rotRight(this.empty, 1) & (this.opponent & Mask.FORWARD_RIGHT);\n    jumpers |= rotRight(capture, 1) & (this.forward & Mask.FORWARD_RIGHT);\n\n    capture = rotLeft(this.empty, 1) & (this.opponent & Mask.BACKWARD_LEFT);\n    jumpers |= rotLeft(capture, 1) & (this.backward & Mask.BACKWARD_LEFT);\n\n    capture = rotLeft(this.empty, 7) & (this.opponent & Mask.BACKWARD_RIGHT);\n    jumpers |= rotLeft(capture, 7) & (this.backward & Mask.BACKWARD_RIGHT);\n\n    return jumpers;\n  }\n\n  getMovers(): number {\n    let movers = 0;\n\n    if (this.forward) {\n      movers |= rotRight(this.empty, 7) & this.forward & Mask.FORWARD_LEFT;\n      movers |= rotRight(this.empty, 1) & this.forward & Mask.FORWARD_RIGHT;\n    }\n    if (this.backward) {\n      movers |= rotLeft(this.empty, 1) & this.backward & Mask.BACKWARD_LEFT;\n      movers |= rotLeft(this.empty, 7) & this.backward & Mask.BACKWARD_RIGHT;\n    }\n\n    return movers;\n  }\n\n  getMovesFromOrigin(origin: number): DraughtsEngineMove<number>[] {\n    const moves: DraughtsEngineMove<number>[] = [];\n\n    if (origin & this.forward) {\n      const d1 = (rotLeft(origin & Mask.FORWARD_LEFT, 7) & this.empty) >>> 0;\n      if (d1) {\n        moves.push({ origin, destination: d1, captures: 0 });\n      }\n\n      const d2 = (rotLeft(origin & Mask.FORWARD_RIGHT, 1) & this.empty) >>> 0;\n      if (d2) {\n        moves.push({ origin, destination: d2, captures: 0 });\n      }\n    }\n\n    if (origin & this.backward) {\n      const d3 = rotRight(origin & Mask.BACKWARD_LEFT, 1) & this.empty;\n      if (d3) {\n        moves.push({ origin, destination: d3, captures: 0 });\n      }\n\n      const d4 = rotRight(origin & Mask.BACKWARD_RIGHT, 7) & this.empty;\n      if (d4) {\n        moves.push({ origin, destination: d4, captures: 0 });\n      }\n    }\n\n    return moves;\n  }\n\n  getJumpsFromOrigin(origin: number) {\n    const searchStack = this.getSingleJumpFromOrigin(origin);\n    const moves: DraughtsEngineMove<number>[] = [];\n\n    while (searchStack.length > 0) {\n      const searchJump = searchStack.pop();\n      if (searchJump === undefined) break;\n\n      const nextBoard = this._fromMove({\n        ...searchJump,\n        origin,\n      });\n\n      const nextJumps = nextBoard.getSingleJumpFromOrigin(\n        searchJump.destination\n      );\n\n      for (const nextJump of nextJumps) {\n        searchStack.push({\n          origin,\n          destination: nextJump.destination,\n          captures: searchJump.captures | nextJump.captures,\n        });\n      }\n\n      if (nextJumps.length === 0) moves.push(searchJump);\n    }\n\n    return moves;\n  }\n\n  getSingleJumpFromOrigin(origin: number): DraughtsEngineMove<number>[] {\n    const moves: DraughtsEngineMove<number>[] = [];\n\n    if (origin & this.forward) {\n      const c1 = rotLeft(origin & Mask.FORWARD_LEFT, 7) & this.opponent;\n      const d1 = (rotLeft(c1 & Mask.FORWARD_LEFT, 7) & this.empty) >>> 0;\n      if (d1) {\n        moves.push({ origin, destination: d1, captures: c1 });\n      }\n\n      const c2 = rotLeft(origin & Mask.FORWARD_RIGHT, 1) & this.opponent;\n      const d2 = (rotLeft(c2 & Mask.FORWARD_RIGHT, 1) & this.empty) >>> 0;\n      if (d2) {\n        moves.push({ origin, destination: d2, captures: c2 });\n      }\n    }\n\n    if (origin & this.backward) {\n      const c3 = rotRight(origin & Mask.BACKWARD_LEFT, 1) & this.opponent;\n      const d3 = rotRight(c3 & Mask.BACKWARD_LEFT, 1) & this.empty;\n      if (d3) {\n        moves.push({ origin, destination: d3, captures: c3 });\n      }\n\n      const c4 = rotRight(origin & Mask.BACKWARD_RIGHT, 7) & this.opponent;\n      const d4 = rotRight(c4 & Mask.BACKWARD_RIGHT, 7) & this.empty;\n      if (d4) {\n        moves.push({ origin, destination: d4, captures: c4 });\n      }\n    }\n\n    return moves;\n  }\n\n  private _fromMove(\n    move: DraughtsEngineMove<number>\n  ): EnglishDraughtsMoveGenerator {\n    return new EnglishDraughtsMoveGenerator({\n      forward:\n        this.forward & move.origin\n          ? this.forward | move.destination\n          : this.forward,\n      backward:\n        this.backward & move.origin\n          ? this.backward | move.destination\n          : this.backward,\n      opponent: this.opponent & ~move.captures,\n      empty: this.empty,\n    });\n  }\n}\n","import type {\n  DraughtsEngineData,\n  DraughtsEngineMove,\n  DraughtsEngineStrategy,\n} from '../core/engine';\nimport { DraughtsEngine, DraughtsStatus, DraughtsPlayer } from '../core/engine';\nimport { compareMove } from '../core/utils';\nimport Mask from './mask';\nimport { EnglishDraughtsMoveGenerator } from './move-generation';\nimport { decomposeBits } from './utils';\n\nexport type EnglishDraughtsEngineStore = {\n  readonly sinceCapture: number;\n  readonly sinceNonKingAdvance: number;\n};\n\nexport type EnglishDraughtsEngineData = DraughtsEngineData<\n  number,\n  EnglishDraughtsEngineStore\n>;\n\nexport type EnglishDraughtsEngine = DraughtsEngine<\n  number,\n  EnglishDraughtsEngineStore\n>;\n\nexport const EnglishDraughtsEngineDefaultData: EnglishDraughtsEngineData = {\n  player: DraughtsPlayer.DARK,\n  board: {\n    light: Mask.LIGHT_START,\n    dark: Mask.DARK_START,\n    king: 0,\n  },\n  store: {\n    sinceCapture: 0,\n    sinceNonKingAdvance: 0,\n  },\n};\n\nexport const EnglishDraughtsEngineStrategy: DraughtsEngineStrategy<\n  number,\n  EnglishDraughtsEngineStore\n> = {\n  serializeStore(store: EnglishDraughtsEngineStore) {\n    return {\n      ...store,\n    };\n  },\n\n  status(engine: EnglishDraughtsEngine) {\n    if (engine.moves.length === 0) {\n      return engine.data.player === DraughtsPlayer.LIGHT\n        ? DraughtsStatus.DARK_WON\n        : DraughtsStatus.LIGHT_WON;\n    }\n    if (\n      engine.data.store.sinceCapture >= 40 &&\n      engine.data.store.sinceNonKingAdvance >= 40\n    ) {\n      return DraughtsStatus.DRAW;\n    }\n    return DraughtsStatus.PLAYING;\n  },\n\n  isValidMove(engine: EnglishDraughtsEngine, move: DraughtsEngineMove<number>) {\n    return engine.moves.some((validMove) => compareMove(move, validMove));\n  },\n\n  moves(engine: EnglishDraughtsEngine) {\n    const generator = EnglishDraughtsMoveGenerator.fromPlayerAndBoard(\n      engine.data.player,\n      engine.data.board\n    );\n\n    const moves: DraughtsEngineMove<number>[] = [];\n\n    const jumpers = generator.getJumpers();\n    if (jumpers) {\n      for (const jumper of decomposeBits(jumpers)) {\n        moves.push(...generator.getJumpsFromOrigin(jumper));\n      }\n      return moves;\n    }\n\n    const movers = generator.getMovers();\n    for (const mover of decomposeBits(movers)) {\n      moves.push(...generator.getMovesFromOrigin(mover));\n    }\n\n    return moves;\n  },\n\n  move(engine: EnglishDraughtsEngine, move: DraughtsEngineMove<number>) {\n    if (!engine.isValidMove(move)) {\n      throw new Error(`invalid move: ${JSON.stringify(move)}`);\n    }\n\n    const board = {\n      ...engine.data.board,\n    };\n\n    const store = { ...engine.data.store };\n\n    board.light &= ~(move.origin | move.captures);\n    board.dark &= ~(move.origin | move.captures);\n    board.king &= ~(move.origin | move.captures);\n\n    if (engine.data.board.light & move.origin) {\n      board.light |= move.destination;\n      board.king |= move.destination & Mask.RANK_7;\n    } else {\n      board.dark |= move.destination;\n      board.king |= move.destination & Mask.RANK_0;\n    }\n\n    if (engine.data.board.king & move.origin) {\n      board.king |= move.destination;\n      store.sinceNonKingAdvance += 1;\n    } else {\n      store.sinceNonKingAdvance = 0;\n    }\n\n    if (move.captures) {\n      store.sinceCapture = 0;\n    } else {\n      store.sinceCapture += 1;\n    }\n\n    return {\n      player:\n        engine.data.player === DraughtsPlayer.LIGHT\n          ? DraughtsPlayer.DARK\n          : DraughtsPlayer.LIGHT,\n      board,\n      store,\n    };\n  },\n};\n\nexport const EnglishDraughtsEngineFactory = {\n  /**\n   * Set up an English Draughts engine with optional data\n   * @param data Optional data for the engine\n   * @returns An English Draughts engine instance\n   */\n  setup(data?: Partial<EnglishDraughtsEngineData>): EnglishDraughtsEngine {\n    return new DraughtsEngine(\n      { ...EnglishDraughtsEngineDefaultData, ...data },\n      EnglishDraughtsEngineStrategy\n    );\n  },\n};\n","import {\n  DraughtsEngineBoard,\n  DraughtsEngineData,\n  DraughtsEngineMove,\n  DraughtsPlayer,\n} from '../core/engine';\nimport {\n  DraughtsBoard1D,\n  DraughtsAdapter1D,\n  DraughtsMove1D,\n  DraughtsGame1D,\n  DraughtsGameHistory1D,\n} from '../core/game';\nimport {\n  EnglishDraughtsEngineFactory,\n  EnglishDraughtsEngineStore,\n} from './engine';\n\nimport { EnglishDraughtsBitSquare as S, decomposeBits } from './utils';\n\nconst ENGLISH_DRAUGHTS_LAYOUT = [\n  S[11],\n  S[5],\n  S[31],\n  S[25],\n  S[10],\n  S[4],\n  S[30],\n  S[24],\n  S[3],\n  S[29],\n  S[23],\n  S[17],\n  S[2],\n  S[28],\n  S[22],\n  S[16],\n  S[27],\n  S[21],\n  S[15],\n  S[9],\n  S[26],\n  S[20],\n  S[14],\n  S[8],\n  S[19],\n  S[13],\n  S[7],\n  S[1],\n  S[18],\n  S[12],\n  S[6],\n  S[0],\n];\n\nconst SQUARE_TO_REF: Map<number | undefined, number | undefined> = new Map(\n  ENGLISH_DRAUGHTS_LAYOUT.map((square, squareIndex) => [square, squareIndex])\n);\n\nexport const EnglishDraughtsAdapter1D: DraughtsAdapter1D<number> = {\n  toMove1D(engineMove: DraughtsEngineMove<number>): DraughtsMove1D {\n    const origin = SQUARE_TO_REF.get(engineMove.origin);\n    if (origin === undefined)\n      throw new Error(`invalid move origin: ${engineMove.origin}`);\n\n    const destination = SQUARE_TO_REF.get(engineMove.destination);\n    if (destination === undefined)\n      throw new Error(`invalid move destination: ${engineMove.destination}`);\n\n    const captures = [];\n    for (const capture of decomposeBits(engineMove.captures)) {\n      const captureRef = SQUARE_TO_REF.get(capture);\n      if (captureRef !== undefined) captures.push(captureRef);\n    }\n\n    return { origin, destination, captures };\n  },\n\n  toEngineMove(adapterMove: DraughtsMove1D): DraughtsEngineMove<number> {\n    const origin = ENGLISH_DRAUGHTS_LAYOUT[adapterMove.origin];\n    if (origin === undefined)\n      throw new Error(`invalid move origin: ${adapterMove.origin}`);\n\n    const destination = ENGLISH_DRAUGHTS_LAYOUT[adapterMove.destination];\n    if (destination === undefined)\n      throw new Error(`invalid move destination: ${adapterMove.destination}`);\n\n    let captures = 0;\n    for (const capture of adapterMove.captures) {\n      const square = ENGLISH_DRAUGHTS_LAYOUT[capture];\n      if (square === undefined)\n        throw new Error(`invalid move capture: ${capture}`);\n      captures |= square;\n    }\n    return { origin, destination, captures };\n  },\n\n  toBoard1D(engineBoard: DraughtsEngineBoard<number>): DraughtsBoard1D {\n    const board: DraughtsBoard1D = [];\n\n    for (const [position, bit] of ENGLISH_DRAUGHTS_LAYOUT.entries()) {\n      // light squares before\n      if (Math.floor(position / 4) % 2 === 0) {\n        board.push({ dark: false, piece: undefined, position: undefined });\n      }\n\n      const isLightPiece = !!(bit & engineBoard.light);\n      const isDarkPiece = !!(bit & engineBoard.dark);\n      const isKingPiece = !!(bit & engineBoard.king);\n\n      // populated dark square\n      board.push({\n        dark: true,\n        position,\n        piece:\n          isLightPiece || isDarkPiece\n            ? {\n                player: isLightPiece\n                  ? DraughtsPlayer.LIGHT\n                  : DraughtsPlayer.DARK,\n                king: isKingPiece,\n              }\n            : undefined,\n      });\n\n      // light squares after\n      if (Math.floor(position / 4) % 2 !== 0) {\n        board.push({ dark: false, piece: undefined, position: undefined });\n      }\n    }\n\n    return board;\n  },\n};\n\nexport const EnglishDraughtsDefaultHistory1D: DraughtsGameHistory1D = {\n  moves: [],\n  boards: [],\n};\n\nexport type EnglishDraughtsGame = DraughtsGame1D<\n  number,\n  EnglishDraughtsEngineStore\n>;\n\nexport const EnglishDraughts = {\n  /**\n   * Sets up a new English Draughts game\n   * @param data Optional data to initialize the game engine\n   * @param history Optional history to initialize the game\n   * @returns The new English Draughts game\n   */\n  setup(\n    data?: Partial<DraughtsEngineData<number, EnglishDraughtsEngineStore>>,\n    history?: Partial<DraughtsGameHistory1D>\n  ): EnglishDraughtsGame {\n    const engine = EnglishDraughtsEngineFactory.setup(data);\n    return new DraughtsGame1D(\n      engine,\n      { ...EnglishDraughtsDefaultHistory1D, ...history },\n      EnglishDraughtsAdapter1D\n    );\n  },\n};\n","import { Bitboard, DraughtsEngine, DraughtsEngineMove } from '../core/engine';\nimport {\n  DraughtsAdapter1D,\n  DraughtsGame1D,\n  DraughtsMove1D,\n} from '../core/game';\n\nexport type SearchEvaluationFunction<T extends Bitboard, E> = (\n  engine: DraughtsEngine<T, E>\n) => number;\n\nexport type DraughtsComputerStrategyArgs<T extends Bitboard, E, O> = {\n  options: O;\n  engine: DraughtsEngine<T, E>;\n};\n\nexport type DraughtsComputerStrategy<T extends Bitboard, E, O> = (\n  args: DraughtsComputerStrategyArgs<T, E, O>\n) => Promise<DraughtsEngineMove<T>>;\n\nexport type DraughtsComputer<T extends Bitboard, E> = (\n  game: DraughtsGame1D<T, E>\n) => Promise<DraughtsMove1D>;\n\nexport type DraughtsComputerArguments<T extends Bitboard, E, O> = {\n  adapter: DraughtsAdapter1D<T>;\n  strategy: DraughtsComputerStrategy<T, E, O>;\n  options: O;\n};\n\nexport const DraughtsComputerFactory = {\n  setup<T extends Bitboard, E, O>({\n    adapter,\n    strategy,\n    options,\n  }: DraughtsComputerArguments<T, E, O>): DraughtsComputer<T, E> {\n    return async (game) => {\n      const engineMove = await strategy({\n        options,\n        engine: game.engine,\n      });\n      return adapter.toMove1D(engineMove);\n    };\n  },\n};\n","import {\n  DraughtsComputerStrategyArgs,\n  SearchEvaluationFunction,\n} from './computer';\nimport { Bitboard, DraughtsEngine, DraughtsEngineMove } from '../core/engine';\n\nexport type AlphaBetaOptions<T extends Bitboard, E> = {\n  maxDepth: number;\n  evaluationFunction: SearchEvaluationFunction<T, E>;\n  quiescence?: boolean;\n};\n\nexport async function alphaBeta<T extends Bitboard, E>({\n  options: { maxDepth, evaluationFunction, quiescence = true },\n  engine,\n}: DraughtsComputerStrategyArgs<T, E, AlphaBetaOptions<T, E>>): Promise<\n  DraughtsEngineMove<T>\n> {\n  let recordEvaluation = Number.NEGATIVE_INFINITY;\n  let recordMove: DraughtsEngineMove<T> | undefined;\n\n  for (const move of engine.moves) {\n    const next = engine.clone();\n    next.move(move);\n\n    const evaluation = -(await alphaBetaSearch({\n      data: {\n        engine: next,\n        alpha: Number.NEGATIVE_INFINITY,\n        beta: Number.POSITIVE_INFINITY,\n        depth: maxDepth - 1,\n      },\n      options: { evaluationFunction, quiescence },\n    }));\n    if (evaluation >= recordEvaluation) {\n      recordEvaluation = evaluation;\n      recordMove = move;\n    }\n  }\n\n  if (recordMove === undefined) {\n    throw new Error('no available moves');\n  }\n\n  return recordMove;\n}\n\n/**\n * Options for the alpha-beta pruning search algorithm\n *\n * @typedef {Object} AlphaBetaOptions\n * @property {number} maxDepth - Maximum depth of the search tree for the alpha-beta pruning algorithm.\n * @property {SearchEvaluationFunction<T, E>} evaluationFunction - The evaluation function to be used for scoring game states.\n * @property {boolean} [quiescence] - Optional flag to enable/disable quiescence search. Defaults to true.\n */\ntype AlphaBetaSearchArguments<T extends Bitboard, E> = {\n  data: {\n    engine: DraughtsEngine<T, E>;\n    alpha: number;\n    beta: number;\n    depth: number;\n  };\n  options: Omit<AlphaBetaOptions<T, E>, 'maxDepth'>;\n};\n\nasync function alphaBetaSearch<T extends Bitboard, E>({\n  data: { engine, alpha, beta, depth },\n  options: { evaluationFunction, quiescence },\n}: AlphaBetaSearchArguments<T, E>) {\n  if (depth === 0)\n    return quiescence\n      ? quiescenceSearch({\n          data: { engine, alpha, beta },\n          options: { evaluationFunction },\n        })\n      : evaluationFunction(engine);\n\n  for (const move of engine.moves) {\n    const next = engine.clone();\n    next.move(move);\n\n    const evaluation = -(await alphaBetaSearch({\n      data: {\n        engine: next,\n        alpha: -beta,\n        beta: -alpha,\n        depth: depth - 1,\n      },\n      options: { evaluationFunction, quiescence: quiescence },\n    }));\n    if (evaluation >= beta) return beta;\n    alpha = Math.max(evaluation, alpha);\n  }\n\n  return alpha;\n}\n\ninterface QuiescenceSearchArguments<T extends Bitboard, E> {\n  data: {\n    engine: DraughtsEngine<T, E>;\n    alpha: number;\n    beta: number;\n  };\n  options: {\n    evaluationFunction: SearchEvaluationFunction<T, E>;\n  };\n}\n\nasync function quiescenceSearch<T extends Bitboard, E>({\n  data: { engine, alpha, beta },\n  options: { evaluationFunction },\n}: QuiescenceSearchArguments<T, E>) {\n  const evaluation = evaluationFunction(engine);\n  if (evaluation >= beta) return beta;\n  alpha = Math.max(evaluation, alpha);\n\n  for (const move of engine.moves) {\n    if (!move.captures) continue;\n    const next = engine.clone();\n    next.move(move);\n\n    const nextEvaluation = -(await quiescenceSearch({\n      data: { engine: next, alpha: -beta, beta: -alpha },\n      options: { evaluationFunction },\n    }));\n\n    if (nextEvaluation >= beta) return beta;\n    alpha = Math.max(nextEvaluation, alpha);\n  }\n\n  return alpha;\n}\n","import { Bitboard, DraughtsEngineMove } from '../core/engine';\nimport { DraughtsComputerStrategyArgs } from './computer';\n\nexport async function random<T extends Bitboard, E>({\n  engine,\n}: DraughtsComputerStrategyArgs<T, E, undefined>): Promise<\n  DraughtsEngineMove<T>\n> {\n  if (engine.moves.length === 0) throw new Error('no valid moves');\n\n  const randomIndex = Math.floor(Math.random() * engine.moves.length);\n  const randomEngineMove = engine.moves[randomIndex];\n\n  return randomEngineMove;\n}\n","import {\n  DraughtsComputerFactory,\n  DraughtsComputer,\n  SearchEvaluationFunction,\n} from '../computer/computer';\nimport { alphaBeta, AlphaBetaOptions } from '../computer/alpha-beta';\nimport { random } from '../computer/random';\nimport { DraughtsEngine, DraughtsPlayer, DraughtsStatus } from '../core/engine';\nimport { EnglishDraughtsEngineStore } from './engine';\nimport { EnglishDraughtsAdapter1D } from './game';\nimport { cardinality } from './utils';\nimport Mask from './mask';\n\nconst statusToPlayer = {\n  [DraughtsStatus.LIGHT_WON]: DraughtsPlayer.LIGHT,\n  [DraughtsStatus.DARK_WON]: DraughtsPlayer.DARK,\n};\n\n/**\n * Evaluation function for the English Draughts game\n *\n * @param {DraughtsEngine<number, EnglishDraughtsEngineStore>} engine - The game engine\n * @returns {number} - Evaluation score for the given position\n */\nexport const evaluate: SearchEvaluationFunction<\n  number,\n  EnglishDraughtsEngineStore\n> = (engine: DraughtsEngine<number, EnglishDraughtsEngineStore>) => {\n  const status = engine.status;\n  if (status !== DraughtsStatus.PLAYING) {\n    if (status === DraughtsStatus.DRAW) return Number.NEGATIVE_INFINITY;\n    return engine.data.player === statusToPlayer[status]\n      ? Number.POSITIVE_INFINITY\n      : Number.NEGATIVE_INFINITY;\n  }\n  return evaluateMiddlegame(engine);\n};\n\nconst PIECE_WEIGHT = 50;\nconst KING_WEIGHT = 77;\nconst BACK_ROW_WEIGHT = 40;\nconst MIDDLE_TWO_RANK_FOUR_FILE_WEIGHT = 25;\nconst MIDDLE_FOUR_RANK_TWO_FILE_WEIGHT = 5;\n\nfunction evaluateMiddlegame(\n  engine: DraughtsEngine<number, EnglishDraughtsEngineStore>\n): number {\n  const player =\n    engine.data.player === DraughtsPlayer.LIGHT\n      ? engine.data.board.light\n      : engine.data.board.dark;\n  const opponent =\n    engine.data.player === DraughtsPlayer.LIGHT\n      ? engine.data.board.dark\n      : engine.data.board.light;\n  const playerKings = player & engine.data.board.king;\n  const opponentKings = opponent & engine.data.board.king;\n\n  const back_row =\n    engine.data.player === DraughtsPlayer.LIGHT ? Mask.RANK_0 : Mask.RANK_7;\n  const opponent_back_row =\n    engine.data.player === DraughtsPlayer.LIGHT ? Mask.RANK_7 : Mask.RANK_0;\n\n  const playerPieces = cardinality(player);\n  const opponentPieces = cardinality(opponent);\n  const playerKingsCount = cardinality(playerKings);\n  const opponentKingsCount = cardinality(opponentKings);\n  const playerBackRowCount = cardinality(player & back_row);\n  const opponentBackRowCount = cardinality(opponent & opponent_back_row);\n  const playerMiddleTwoRankFourFileCount = cardinality(\n    player & Mask.MIDDLE_TWO_RANK_FOUR_FILE\n  );\n  const opponentMiddleTwoRankFourFileCount = cardinality(\n    opponent & Mask.MIDDLE_TWO_RANK_FOUR_FILE\n  );\n  const playerMiddleFourRankTwoFileCount = cardinality(\n    player & Mask.MIDDLE_FOUR_RANK_TWO_FILE\n  );\n  const opponentMiddleFourRankTwoFileCount = cardinality(\n    opponent & Mask.MIDDLE_FOUR_RANK_TWO_FILE\n  );\n\n  return (\n    (playerPieces - opponentPieces) * PIECE_WEIGHT +\n    (playerKingsCount - opponentKingsCount) * KING_WEIGHT +\n    (playerBackRowCount - opponentBackRowCount) * BACK_ROW_WEIGHT +\n    (playerMiddleTwoRankFourFileCount - opponentMiddleTwoRankFourFileCount) *\n      MIDDLE_TWO_RANK_FOUR_FILE_WEIGHT +\n    (playerMiddleFourRankTwoFileCount - opponentMiddleFourRankTwoFileCount) *\n      MIDDLE_FOUR_RANK_TWO_FILE_WEIGHT\n  );\n}\n\nexport type EnglishDraughtsComputer = DraughtsComputer<\n  number,\n  EnglishDraughtsEngineStore\n>;\n\nexport const EnglishDraughtsComputerFactory = {\n  /**\n   * Creates a computer opponent with a random strategy\n   * @returns {EnglishDraughtsComputer} - A computer opponent with a random strategy\n   */\n  random(): EnglishDraughtsComputer {\n    return DraughtsComputerFactory.setup({\n      adapter: EnglishDraughtsAdapter1D,\n      strategy: random<number, EnglishDraughtsEngineStore>,\n      options: undefined,\n    });\n  },\n  /**\n   * Creates a computer opponent with an alpha-beta pruning strategy\n   * @param {Partial<AlphaBetaOptions<number, EnglishDraughtsEngineStore>>} options - Options for the alpha-beta pruning strategy\n   * @returns {EnglishDraughtsComputer} - A computer opponent with an alpha-beta pruning strategy\n   */\n  alphaBeta(\n    options: Partial<AlphaBetaOptions<number, EnglishDraughtsEngineStore>>\n  ): EnglishDraughtsComputer {\n    const withDefaultOptions: AlphaBetaOptions<\n      number,\n      EnglishDraughtsEngineStore\n    > = {\n      maxDepth: options.maxDepth ?? 4,\n      quiescence: options.quiescence ?? true,\n      evaluationFunction: options.evaluationFunction ?? evaluate,\n    };\n\n    return DraughtsComputerFactory.setup({\n      adapter: EnglishDraughtsAdapter1D,\n      strategy: alphaBeta<number, EnglishDraughtsEngineStore>,\n      options: withDefaultOptions,\n    });\n  },\n};\n"],"names":["compareMove","moveA","moveB","formatBoard","board","boardSize","div","str","ref","square","char","DraughtsPlayer","DraughtsGame1D","engine","history","adapter","__publicField","engineMove","move","BITS","EnglishDraughtsBitSquare","index","BIT_MASK","rotRight","value","r","rotation","rotLeft","decomposeBits","split","bit","cardinality","num","BOARD","S","RANK_0","RANK_1","RANK_2","RANK_5","RANK_6","RANK_7","FILE_0","FILE_7","FORWARD_LEFT","FORWARD_RIGHT","BACKWARD_LEFT","BACKWARD_RIGHT","LIGHT_START","DARK_START","MIDDLE_TWO_RANK_FOUR_FILE","MIDDLE_FOUR_RANK_TWO_FILE","Mask","EnglishDraughtsMoveGenerator","args","player","forward","backward","opponent","empty","capture","jumpers","movers","origin","moves","d1","d2","d3","d4","searchStack","searchJump","nextJumps","nextJump","c1","c2","c3","c4","EnglishDraughtsEngineDefaultData","EnglishDraughtsEngineStrategy","store","DraughtsStatus","validMove","generator","jumper","mover","EnglishDraughtsEngineFactory","data","DraughtsEngine","ENGLISH_DRAUGHTS_LAYOUT","SQUARE_TO_REF","squareIndex","EnglishDraughtsAdapter1D","destination","captures","captureRef","adapterMove","engineBoard","position","isLightPiece","isDarkPiece","isKingPiece","EnglishDraughtsDefaultHistory1D","EnglishDraughts","DraughtsComputerFactory","strategy","options","game","alphaBeta","maxDepth","evaluationFunction","quiescence","recordEvaluation","recordMove","next","evaluation","alphaBetaSearch","alpha","beta","depth","quiescenceSearch","nextEvaluation","random","randomIndex","statusToPlayer","evaluate","status","evaluateMiddlegame","PIECE_WEIGHT","KING_WEIGHT","BACK_ROW_WEIGHT","MIDDLE_TWO_RANK_FOUR_FILE_WEIGHT","MIDDLE_FOUR_RANK_TWO_FILE_WEIGHT","playerKings","opponentKings","back_row","opponent_back_row","playerPieces","opponentPieces","playerKingsCount","opponentKingsCount","playerBackRowCount","opponentBackRowCount","playerMiddleTwoRankFourFileCount","opponentMiddleTwoRankFourFileCount","playerMiddleFourRankTwoFileCount","opponentMiddleFourRankTwoFileCount","EnglishDraughtsComputerFactory","withDefaultOptions"],"mappings":"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"}