{"version":3,"file":"english.cjs","sources":["../src/core/utils.ts","../src/core/game.ts","../src/english/utils.ts","../src/english/mask.ts","../src/english/move-generation.ts","../src/english/engine.ts","../src/english/game.ts","../src/computer/computer.ts","../src/computer/alpha-beta.ts","../src/computer/random.ts","../src/english/computer.ts"],"sourcesContent":["import { Bitboard, DraughtsEngineMove, DraughtsPlayer } from './engine';\nimport { DraughtsBoard1D, DraughtsMove1D } from './game';\n\nexport function compareMove(\n  moveA: DraughtsEngineMove<Bitboard>,\n  moveB: DraughtsEngineMove<Bitboard>\n): boolean {\n  return (\n    moveA.origin === moveB.origin &&\n    moveA.destination === moveB.destination &&\n    moveA.captures === moveB.captures\n  );\n}\n\nexport function compareCaptures1D(\n  capturesA: number[],\n  capturesB: number[]\n): boolean {\n  if (capturesA.length !== capturesB.length) {\n    return false;\n  }\n  for (const [i, element] of capturesA.entries()) {\n    if (element !== capturesB[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport function comparePartialMove1D(\n  moveA: DraughtsMove1D,\n  moveB: Partial<DraughtsMove1D>\n): boolean {\n  if (moveB.origin && moveA.origin !== moveB.origin) {\n    return false;\n  }\n  if (moveB.destination && moveA.destination !== moveB.destination) {\n    return false;\n  }\n  if (moveB.captures && !compareCaptures1D(moveA.captures, moveB.captures)) {\n    return false;\n  }\n  return true;\n}\n\nexport function formatBoard(board: DraughtsBoard1D) {\n  const boardSize = Math.floor(Math.sqrt(board.length));\n  const div = '-'.repeat(1 + boardSize * 4);\n  let str = `${div}\\n`;\n\n  for (const [ref, square] of board.entries()) {\n    // is start of row\n    if (ref % boardSize === 0) {\n      str += `|`;\n    }\n\n    // output square\n    if (square.piece) {\n      let char = square.piece.player === DraughtsPlayer.LIGHT ? 'x' : 'o';\n      char = square.piece.king ? char.toUpperCase() : char;\n      str += ` ${char} |`;\n    } else {\n      str += '   |';\n    }\n\n    // is end of row\n    if (ref % boardSize === boardSize - 1) {\n      str += ` \\n${div}\\n`;\n    }\n  }\n\n  return str;\n}\n","import { DraughtsPlayer } from './engine';\nimport type {\n  Bitboard,\n  DraughtsEngine,\n  DraughtsEngineBoard,\n  DraughtsEngineMove,\n  DraughtsStatus,\n} from './engine';\nimport { formatBoard } from './utils';\n\nexport type DraughtsPiece1D = {\n  readonly king: boolean;\n  readonly player: DraughtsPlayer;\n};\n\nexport type DraughtsDarkSquare1D = {\n  readonly piece: DraughtsPiece1D | undefined;\n  readonly position: number;\n  readonly dark: true;\n};\n\nexport type DraughtsLightSquare1D = {\n  readonly piece: undefined;\n  readonly position: undefined;\n  readonly dark: false;\n};\n\nexport type DraughtsSquare1D = DraughtsLightSquare1D | DraughtsDarkSquare1D;\n\nexport type DraughtsBoard1D = DraughtsSquare1D[];\n\nexport type DraughtsMove1D = {\n  readonly origin: number;\n  readonly destination: number;\n  readonly captures: number[];\n};\n\nexport type DraughtsGameHistory1D = {\n  moves: DraughtsMove1D[];\n  boards: DraughtsBoard1D[];\n};\n\nexport type DraughtsAdapter1D<T extends Bitboard> = {\n  toMove1D: (engineMove: DraughtsEngineMove<T>) => DraughtsMove1D;\n  toEngineMove: (move1D: DraughtsMove1D) => DraughtsEngineMove<T>;\n  toBoard1D: (engineBoard: DraughtsEngineBoard<T>) => DraughtsBoard1D;\n};\n\nexport class DraughtsGame1D<T extends Bitboard, E> {\n  engine: DraughtsEngine<T, E>;\n  history: DraughtsGameHistory1D;\n\n  private _board: DraughtsBoard1D | undefined;\n  private _moves: DraughtsMove1D[] | undefined;\n\n  private readonly adapter: DraughtsAdapter1D<T>;\n\n  constructor(\n    engine: DraughtsEngine<T, E>,\n    history: DraughtsGameHistory1D,\n    adapter: DraughtsAdapter1D<T>\n  ) {\n    this.engine = engine;\n    this.history = history;\n    this.adapter = adapter;\n  }\n\n  /**\n   * Get the status of the game\n   */\n  get status(): DraughtsStatus {\n    return this.engine.status;\n  }\n\n  /**\n   * Get the current player to move\n   */\n  get player(): DraughtsPlayer {\n    return this.engine.data.player;\n  }\n\n  /**\n   * Get the 1D array representation of the current board\n   */\n  get board(): DraughtsBoard1D {\n    return (this._board ??= this.adapter.toBoard1D(this.engine.data.board));\n  }\n\n  /**\n   * Get the available moves in 1D representation\n   */\n  get moves(): DraughtsMove1D[] {\n    return (this._moves ??= this.engine.moves.map((engineMove) =>\n      this.adapter.toMove1D(engineMove)\n    ));\n  }\n\n  /**\n   * Check if a move is valid\n   * @param move The move to check in 1D representation\n   * @returns True if the move is valid, false otherwise.\n   */\n  isValidMove(move: DraughtsMove1D) {\n    const engineMove = this.adapter.toEngineMove(move);\n    return this.engine.isValidMove(engineMove);\n  }\n\n  /**\n   * Make a move using the 1D representation of a move\n   * @param move The move to make in 1D representation\n   */\n  move(move: DraughtsMove1D) {\n    if (!this.isValidMove(move)) {\n      throw new Error(`invalid move: ${JSON.stringify(move)}`);\n    }\n\n    this.history.boards.push(this.board);\n    this.history.moves.push(move);\n\n    const engineMove = this.adapter.toEngineMove(move);\n    this.engine.move(engineMove);\n\n    this._board = undefined;\n    this._moves = undefined;\n  }\n\n  asciiBoard() {\n    return formatBoard(this.board);\n  }\n}\n","const BITS = 32;\n\nconst EnglishDraughtsBitSquare: Record<number, number> = [];\nEnglishDraughtsBitSquare[0] = 1;\nfor (let index = 1; index < BITS; index++) {\n  EnglishDraughtsBitSquare[index] = EnglishDraughtsBitSquare[index - 1] * 2;\n}\nexport { EnglishDraughtsBitSquare };\n\nconst BIT_MASK = 0xff_ff_ff_ff;\n\nexport function rotRight(value: number, r: number): number {\n  const rotation = r % BITS;\n  const applied =\n    (value >>> rotation) | ((value << (BITS - rotation)) & BIT_MASK);\n  return applied >>> 0;\n}\n\nexport function rotLeft(value: number, r: number): number {\n  const rotation = r % BITS;\n  const applied =\n    ((value << rotation) & BIT_MASK) | (value >>> (BITS - rotation));\n  return applied >>> 0;\n}\n\nexport function decomposeBits(value: number): number[] {\n  const split: number[] = [];\n  for (let bit = 1; value; bit <<= 1) {\n    if (value & bit) {\n      split.push(bit >>> 0);\n      value ^= bit;\n    }\n  }\n  return split;\n}\n\nexport function cardinality(num: number): number {\n  num = num - ((num >>> 1) & 0x55_55_55_55);\n  num = (num & 0x33_33_33_33) + ((num >>> 2) & 0x33_33_33_33);\n  num = (((num + (num >>> 4)) & 0x0f_0f_0f_0f) * 0x01_01_01_01) >>> 24;\n  return num;\n}\n","import { EnglishDraughtsBitSquare as S } from './utils';\n\n/* We use the following bitboard layout for English Draughts\n *\n *   11  05  31  25\n * 10  04  30  24\n *   03  29  23  17\n * 02  28  22  16\n *   27  21  15  09\n * 26  20  14  08\n *   19  13  07  01\n * 18  12  06  00\n *\n * Access the uint32 value of a square with S[n]\n *\n * A move forward to the left is a rotate left 7 bits.\n * A move forward to the right is a rotate left 1 bit.\n */\n\nconst BOARD =\n  S[11] |\n  S[5] |\n  S[31] |\n  S[25] |\n  S[10] |\n  S[4] |\n  S[30] |\n  S[24] |\n  S[3] |\n  S[29] |\n  S[23] |\n  S[17] |\n  S[2] |\n  S[28] |\n  S[22] |\n  S[16] |\n  S[27] |\n  S[21] |\n  S[15] |\n  S[9] |\n  S[26] |\n  S[20] |\n  S[14] |\n  S[8] |\n  S[9] |\n  S[3] |\n  S[7] |\n  S[1] |\n  S[18] |\n  S[12] |\n  S[6] |\n  S[0];\n\nconst RANK_0 = S[18] | S[12] | S[6] | S[0];\nconst RANK_1 = S[19] | S[13] | S[7] | S[1];\nconst RANK_2 = S[26] | S[20] | S[14] | S[8];\n\nconst RANK_5 = S[3] | S[29] | S[23] | S[17];\nconst RANK_6 = S[10] | S[4] | S[30] | S[24];\nconst RANK_7 = S[11] | S[5] | S[31] | S[25];\n\nconst FILE_0 = S[18] | S[26] | S[2] | S[10];\nconst FILE_7 = S[1] | S[9] | S[17] | S[25];\n\nconst FORWARD_LEFT = ~(RANK_7 | FILE_0);\nconst FORWARD_RIGHT = ~(RANK_7 | FILE_7);\nconst BACKWARD_LEFT = ~(RANK_0 | FILE_0);\nconst BACKWARD_RIGHT = ~(RANK_0 | FILE_7);\n\nconst LIGHT_START = RANK_0 | RANK_1 | RANK_2;\nconst DARK_START = RANK_5 | RANK_6 | RANK_7;\n\nconst MIDDLE_TWO_RANK_FOUR_FILE = S[21] | S[28] | S[22];\nconst MIDDLE_FOUR_RANK_TWO_FILE = S[29] | S[22] | S[21] | S[14];\n\nconst Mask = {\n  BOARD,\n  RANK_0,\n  RANK_1,\n  RANK_2,\n  RANK_5,\n  RANK_6,\n  RANK_7,\n  FILE_0,\n  FILE_7,\n  FORWARD_LEFT,\n  FORWARD_RIGHT,\n  BACKWARD_LEFT,\n  BACKWARD_RIGHT,\n  LIGHT_START,\n  DARK_START,\n  MIDDLE_FOUR_RANK_TWO_FILE,\n  MIDDLE_TWO_RANK_FOUR_FILE,\n};\n\nexport default Mask;\n","import {\n  DraughtsEngineBoard,\n  DraughtsEngineMove,\n  DraughtsPlayer,\n} from '../core/engine';\nimport Mask from './mask';\nimport { rotLeft, rotRight } from './utils';\n\nexport type EnglishDraughtsBoardIntermediates = {\n  forward: number;\n  backward: number;\n  opponent: number;\n  empty: number;\n};\n\nexport class EnglishDraughtsMoveGenerator {\n  private forward: number;\n  private backward: number;\n  private opponent: number;\n  private empty: number;\n\n  constructor(args: {\n    forward: number;\n    backward: number;\n    opponent: number;\n    empty: number;\n  }) {\n    this.forward = args.forward;\n    this.backward = args.backward;\n    this.opponent = args.opponent;\n    this.empty = args.empty;\n  }\n\n  static fromPlayerAndBoard(\n    player: DraughtsPlayer,\n    board: DraughtsEngineBoard<number>\n  ) {\n    const forward =\n      player === DraughtsPlayer.LIGHT ? board.light : board.dark & board.king;\n    const backward =\n      player === DraughtsPlayer.LIGHT ? board.light & board.king : board.dark;\n    const opponent = player === DraughtsPlayer.LIGHT ? board.dark : board.light;\n    const empty = ~(board.light | board.dark);\n\n    return new EnglishDraughtsMoveGenerator({\n      forward,\n      backward,\n      opponent,\n      empty,\n    });\n  }\n\n  getJumpers(): number {\n    let capture = rotRight(this.empty, 7) & (this.opponent & Mask.FORWARD_LEFT);\n    let jumpers = rotRight(capture, 7) & (this.forward & Mask.FORWARD_LEFT);\n\n    capture = rotRight(this.empty, 1) & (this.opponent & Mask.FORWARD_RIGHT);\n    jumpers |= rotRight(capture, 1) & (this.forward & Mask.FORWARD_RIGHT);\n\n    capture = rotLeft(this.empty, 1) & (this.opponent & Mask.BACKWARD_LEFT);\n    jumpers |= rotLeft(capture, 1) & (this.backward & Mask.BACKWARD_LEFT);\n\n    capture = rotLeft(this.empty, 7) & (this.opponent & Mask.BACKWARD_RIGHT);\n    jumpers |= rotLeft(capture, 7) & (this.backward & Mask.BACKWARD_RIGHT);\n\n    return jumpers;\n  }\n\n  getMovers(): number {\n    let movers = 0;\n\n    if (this.forward) {\n      movers |= rotRight(this.empty, 7) & this.forward & Mask.FORWARD_LEFT;\n      movers |= rotRight(this.empty, 1) & this.forward & Mask.FORWARD_RIGHT;\n    }\n    if (this.backward) {\n      movers |= rotLeft(this.empty, 1) & this.backward & Mask.BACKWARD_LEFT;\n      movers |= rotLeft(this.empty, 7) & this.backward & Mask.BACKWARD_RIGHT;\n    }\n\n    return movers;\n  }\n\n  getMovesFromOrigin(origin: number): DraughtsEngineMove<number>[] {\n    const moves: DraughtsEngineMove<number>[] = [];\n\n    if (origin & this.forward) {\n      const d1 = (rotLeft(origin & Mask.FORWARD_LEFT, 7) & this.empty) >>> 0;\n      if (d1) {\n        moves.push({ origin, destination: d1, captures: 0 });\n      }\n\n      const d2 = (rotLeft(origin & Mask.FORWARD_RIGHT, 1) & this.empty) >>> 0;\n      if (d2) {\n        moves.push({ origin, destination: d2, captures: 0 });\n      }\n    }\n\n    if (origin & this.backward) {\n      const d3 = rotRight(origin & Mask.BACKWARD_LEFT, 1) & this.empty;\n      if (d3) {\n        moves.push({ origin, destination: d3, captures: 0 });\n      }\n\n      const d4 = rotRight(origin & Mask.BACKWARD_RIGHT, 7) & this.empty;\n      if (d4) {\n        moves.push({ origin, destination: d4, captures: 0 });\n      }\n    }\n\n    return moves;\n  }\n\n  getJumpsFromOrigin(origin: number) {\n    const searchStack = this.getSingleJumpFromOrigin(origin);\n    const moves: DraughtsEngineMove<number>[] = [];\n\n    while (searchStack.length > 0) {\n      const searchJump = searchStack.pop();\n      if (searchJump === undefined) break;\n\n      const nextBoard = this._fromMove({\n        ...searchJump,\n        origin,\n      });\n\n      const nextJumps = nextBoard.getSingleJumpFromOrigin(\n        searchJump.destination\n      );\n\n      for (const nextJump of nextJumps) {\n        searchStack.push({\n          origin,\n          destination: nextJump.destination,\n          captures: searchJump.captures | nextJump.captures,\n        });\n      }\n\n      if (nextJumps.length === 0) moves.push(searchJump);\n    }\n\n    return moves;\n  }\n\n  getSingleJumpFromOrigin(origin: number): DraughtsEngineMove<number>[] {\n    const moves: DraughtsEngineMove<number>[] = [];\n\n    if (origin & this.forward) {\n      const c1 = rotLeft(origin & Mask.FORWARD_LEFT, 7) & this.opponent;\n      const d1 = (rotLeft(c1 & Mask.FORWARD_LEFT, 7) & this.empty) >>> 0;\n      if (d1) {\n        moves.push({ origin, destination: d1, captures: c1 });\n      }\n\n      const c2 = rotLeft(origin & Mask.FORWARD_RIGHT, 1) & this.opponent;\n      const d2 = (rotLeft(c2 & Mask.FORWARD_RIGHT, 1) & this.empty) >>> 0;\n      if (d2) {\n        moves.push({ origin, destination: d2, captures: c2 });\n      }\n    }\n\n    if (origin & this.backward) {\n      const c3 = rotRight(origin & Mask.BACKWARD_LEFT, 1) & this.opponent;\n      const d3 = rotRight(c3 & Mask.BACKWARD_LEFT, 1) & this.empty;\n      if (d3) {\n        moves.push({ origin, destination: d3, captures: c3 });\n      }\n\n      const c4 = rotRight(origin & Mask.BACKWARD_RIGHT, 7) & this.opponent;\n      const d4 = rotRight(c4 & Mask.BACKWARD_RIGHT, 7) & this.empty;\n      if (d4) {\n        moves.push({ origin, destination: d4, captures: c4 });\n      }\n    }\n\n    return moves;\n  }\n\n  private _fromMove(\n    move: DraughtsEngineMove<number>\n  ): EnglishDraughtsMoveGenerator {\n    return new EnglishDraughtsMoveGenerator({\n      forward:\n        this.forward & move.origin\n          ? this.forward | move.destination\n          : this.forward,\n      backward:\n        this.backward & move.origin\n          ? this.backward | move.destination\n          : this.backward,\n      opponent: this.opponent & ~move.captures,\n      empty: this.empty,\n    });\n  }\n}\n","import type {\n  DraughtsEngineData,\n  DraughtsEngineMove,\n  DraughtsEngineStrategy,\n} from '../core/engine';\nimport { DraughtsEngine, DraughtsStatus, DraughtsPlayer } from '../core/engine';\nimport { compareMove } from '../core/utils';\nimport Mask from './mask';\nimport { EnglishDraughtsMoveGenerator } from './move-generation';\nimport { decomposeBits } from './utils';\n\nexport type EnglishDraughtsEngineStore = {\n  readonly sinceCapture: number;\n  readonly sinceNonKingAdvance: number;\n};\n\nexport type EnglishDraughtsEngineData = DraughtsEngineData<\n  number,\n  EnglishDraughtsEngineStore\n>;\n\nexport type EnglishDraughtsEngine = DraughtsEngine<\n  number,\n  EnglishDraughtsEngineStore\n>;\n\nexport const EnglishDraughtsEngineDefaultData: EnglishDraughtsEngineData = {\n  player: DraughtsPlayer.DARK,\n  board: {\n    light: Mask.LIGHT_START,\n    dark: Mask.DARK_START,\n    king: 0,\n  },\n  store: {\n    sinceCapture: 0,\n    sinceNonKingAdvance: 0,\n  },\n};\n\nexport const EnglishDraughtsEngineStrategy: DraughtsEngineStrategy<\n  number,\n  EnglishDraughtsEngineStore\n> = {\n  serializeStore(store: EnglishDraughtsEngineStore) {\n    return {\n      ...store,\n    };\n  },\n\n  status(engine: EnglishDraughtsEngine) {\n    if (engine.moves.length === 0) {\n      return engine.data.player === DraughtsPlayer.LIGHT\n        ? DraughtsStatus.DARK_WON\n        : DraughtsStatus.LIGHT_WON;\n    }\n    if (\n      engine.data.store.sinceCapture >= 40 &&\n      engine.data.store.sinceNonKingAdvance >= 40\n    ) {\n      return DraughtsStatus.DRAW;\n    }\n    return DraughtsStatus.PLAYING;\n  },\n\n  isValidMove(engine: EnglishDraughtsEngine, move: DraughtsEngineMove<number>) {\n    return engine.moves.some((validMove) => compareMove(move, validMove));\n  },\n\n  moves(engine: EnglishDraughtsEngine) {\n    const generator = EnglishDraughtsMoveGenerator.fromPlayerAndBoard(\n      engine.data.player,\n      engine.data.board\n    );\n\n    const moves: DraughtsEngineMove<number>[] = [];\n\n    const jumpers = generator.getJumpers();\n    if (jumpers) {\n      for (const jumper of decomposeBits(jumpers)) {\n        moves.push(...generator.getJumpsFromOrigin(jumper));\n      }\n      return moves;\n    }\n\n    const movers = generator.getMovers();\n    for (const mover of decomposeBits(movers)) {\n      moves.push(...generator.getMovesFromOrigin(mover));\n    }\n\n    return moves;\n  },\n\n  move(engine: EnglishDraughtsEngine, move: DraughtsEngineMove<number>) {\n    if (!engine.isValidMove(move)) {\n      throw new Error(`invalid move: ${JSON.stringify(move)}`);\n    }\n\n    const board = {\n      ...engine.data.board,\n    };\n\n    const store = { ...engine.data.store };\n\n    board.light &= ~(move.origin | move.captures);\n    board.dark &= ~(move.origin | move.captures);\n    board.king &= ~(move.origin | move.captures);\n\n    if (engine.data.board.light & move.origin) {\n      board.light |= move.destination;\n      board.king |= move.destination & Mask.RANK_7;\n    } else {\n      board.dark |= move.destination;\n      board.king |= move.destination & Mask.RANK_0;\n    }\n\n    if (engine.data.board.king & move.origin) {\n      board.king |= move.destination;\n      store.sinceNonKingAdvance += 1;\n    } else {\n      store.sinceNonKingAdvance = 0;\n    }\n\n    if (move.captures) {\n      store.sinceCapture = 0;\n    } else {\n      store.sinceCapture += 1;\n    }\n\n    return {\n      player:\n        engine.data.player === DraughtsPlayer.LIGHT\n          ? DraughtsPlayer.DARK\n          : DraughtsPlayer.LIGHT,\n      board,\n      store,\n    };\n  },\n};\n\nexport const EnglishDraughtsEngineFactory = {\n  /**\n   * Set up an English Draughts engine with optional data\n   * @param data Optional data for the engine\n   * @returns An English Draughts engine instance\n   */\n  setup(data?: Partial<EnglishDraughtsEngineData>): EnglishDraughtsEngine {\n    return new DraughtsEngine(\n      { ...EnglishDraughtsEngineDefaultData, ...data },\n      EnglishDraughtsEngineStrategy\n    );\n  },\n};\n","import {\n  DraughtsEngineBoard,\n  DraughtsEngineData,\n  DraughtsEngineMove,\n  DraughtsPlayer,\n} from '../core/engine';\nimport {\n  DraughtsBoard1D,\n  DraughtsAdapter1D,\n  DraughtsMove1D,\n  DraughtsGame1D,\n  DraughtsGameHistory1D,\n} from '../core/game';\nimport {\n  EnglishDraughtsEngineFactory,\n  EnglishDraughtsEngineStore,\n} from './engine';\n\nimport { EnglishDraughtsBitSquare as S, decomposeBits } from './utils';\n\nconst ENGLISH_DRAUGHTS_LAYOUT = [\n  S[11],\n  S[5],\n  S[31],\n  S[25],\n  S[10],\n  S[4],\n  S[30],\n  S[24],\n  S[3],\n  S[29],\n  S[23],\n  S[17],\n  S[2],\n  S[28],\n  S[22],\n  S[16],\n  S[27],\n  S[21],\n  S[15],\n  S[9],\n  S[26],\n  S[20],\n  S[14],\n  S[8],\n  S[19],\n  S[13],\n  S[7],\n  S[1],\n  S[18],\n  S[12],\n  S[6],\n  S[0],\n];\n\nconst SQUARE_TO_REF: Map<number | undefined, number | undefined> = new Map(\n  ENGLISH_DRAUGHTS_LAYOUT.map((square, squareIndex) => [square, squareIndex])\n);\n\nexport const EnglishDraughtsAdapter1D: DraughtsAdapter1D<number> = {\n  toMove1D(engineMove: DraughtsEngineMove<number>): DraughtsMove1D {\n    const origin = SQUARE_TO_REF.get(engineMove.origin);\n    if (origin === undefined)\n      throw new Error(`invalid move origin: ${engineMove.origin}`);\n\n    const destination = SQUARE_TO_REF.get(engineMove.destination);\n    if (destination === undefined)\n      throw new Error(`invalid move destination: ${engineMove.destination}`);\n\n    const captures = [];\n    for (const capture of decomposeBits(engineMove.captures)) {\n      const captureRef = SQUARE_TO_REF.get(capture);\n      if (captureRef !== undefined) captures.push(captureRef);\n    }\n\n    return { origin, destination, captures };\n  },\n\n  toEngineMove(adapterMove: DraughtsMove1D): DraughtsEngineMove<number> {\n    const origin = ENGLISH_DRAUGHTS_LAYOUT[adapterMove.origin];\n    if (origin === undefined)\n      throw new Error(`invalid move origin: ${adapterMove.origin}`);\n\n    const destination = ENGLISH_DRAUGHTS_LAYOUT[adapterMove.destination];\n    if (destination === undefined)\n      throw new Error(`invalid move destination: ${adapterMove.destination}`);\n\n    let captures = 0;\n    for (const capture of adapterMove.captures) {\n      const square = ENGLISH_DRAUGHTS_LAYOUT[capture];\n      if (square === undefined)\n        throw new Error(`invalid move capture: ${capture}`);\n      captures |= square;\n    }\n    return { origin, destination, captures };\n  },\n\n  toBoard1D(engineBoard: DraughtsEngineBoard<number>): DraughtsBoard1D {\n    const board: DraughtsBoard1D = [];\n\n    for (const [position, bit] of ENGLISH_DRAUGHTS_LAYOUT.entries()) {\n      // light squares before\n      if (Math.floor(position / 4) % 2 === 0) {\n        board.push({ dark: false, piece: undefined, position: undefined });\n      }\n\n      const isLightPiece = !!(bit & engineBoard.light);\n      const isDarkPiece = !!(bit & engineBoard.dark);\n      const isKingPiece = !!(bit & engineBoard.king);\n\n      // populated dark square\n      board.push({\n        dark: true,\n        position,\n        piece:\n          isLightPiece || isDarkPiece\n            ? {\n                player: isLightPiece\n                  ? DraughtsPlayer.LIGHT\n                  : DraughtsPlayer.DARK,\n                king: isKingPiece,\n              }\n            : undefined,\n      });\n\n      // light squares after\n      if (Math.floor(position / 4) % 2 !== 0) {\n        board.push({ dark: false, piece: undefined, position: undefined });\n      }\n    }\n\n    return board;\n  },\n};\n\nexport const EnglishDraughtsDefaultHistory1D: DraughtsGameHistory1D = {\n  moves: [],\n  boards: [],\n};\n\nexport type EnglishDraughtsGame = DraughtsGame1D<\n  number,\n  EnglishDraughtsEngineStore\n>;\n\nexport const EnglishDraughts = {\n  /**\n   * Sets up a new English Draughts game\n   * @param data Optional data to initialize the game engine\n   * @param history Optional history to initialize the game\n   * @returns The new English Draughts game\n   */\n  setup(\n    data?: Partial<DraughtsEngineData<number, EnglishDraughtsEngineStore>>,\n    history?: Partial<DraughtsGameHistory1D>\n  ): EnglishDraughtsGame {\n    const engine = EnglishDraughtsEngineFactory.setup(data);\n    return new DraughtsGame1D(\n      engine,\n      { ...EnglishDraughtsDefaultHistory1D, ...history },\n      EnglishDraughtsAdapter1D\n    );\n  },\n};\n","import { Bitboard, DraughtsEngine, DraughtsEngineMove } from '../core/engine';\nimport {\n  DraughtsAdapter1D,\n  DraughtsGame1D,\n  DraughtsMove1D,\n} from '../core/game';\n\nexport type SearchEvaluationFunction<T extends Bitboard, E> = (\n  engine: DraughtsEngine<T, E>\n) => number;\n\nexport type DraughtsComputerStrategyArgs<T extends Bitboard, E, O> = {\n  options: O;\n  engine: DraughtsEngine<T, E>;\n};\n\nexport type DraughtsComputerStrategy<T extends Bitboard, E, O> = (\n  args: DraughtsComputerStrategyArgs<T, E, O>\n) => Promise<DraughtsEngineMove<T>>;\n\nexport type DraughtsComputer<T extends Bitboard, E> = (\n  game: DraughtsGame1D<T, E>\n) => Promise<DraughtsMove1D>;\n\nexport type DraughtsComputerArguments<T extends Bitboard, E, O> = {\n  adapter: DraughtsAdapter1D<T>;\n  strategy: DraughtsComputerStrategy<T, E, O>;\n  options: O;\n};\n\nexport const DraughtsComputerFactory = {\n  setup<T extends Bitboard, E, O>({\n    adapter,\n    strategy,\n    options,\n  }: DraughtsComputerArguments<T, E, O>): DraughtsComputer<T, E> {\n    return async (game) => {\n      const engineMove = await strategy({\n        options,\n        engine: game.engine,\n      });\n      return adapter.toMove1D(engineMove);\n    };\n  },\n};\n","import {\n  DraughtsComputerStrategyArgs,\n  SearchEvaluationFunction,\n} from './computer';\nimport { Bitboard, DraughtsEngine, DraughtsEngineMove } from '../core/engine';\n\nexport type AlphaBetaOptions<T extends Bitboard, E> = {\n  maxDepth: number;\n  evaluationFunction: SearchEvaluationFunction<T, E>;\n  quiescence?: boolean;\n};\n\nexport async function alphaBeta<T extends Bitboard, E>({\n  options: { maxDepth, evaluationFunction, quiescence = true },\n  engine,\n}: DraughtsComputerStrategyArgs<T, E, AlphaBetaOptions<T, E>>): Promise<\n  DraughtsEngineMove<T>\n> {\n  let recordEvaluation = Number.NEGATIVE_INFINITY;\n  let recordMove: DraughtsEngineMove<T> | undefined;\n\n  for (const move of engine.moves) {\n    const next = engine.clone();\n    next.move(move);\n\n    const evaluation = -(await alphaBetaSearch({\n      data: {\n        engine: next,\n        alpha: Number.NEGATIVE_INFINITY,\n        beta: Number.POSITIVE_INFINITY,\n        depth: maxDepth - 1,\n      },\n      options: { evaluationFunction, quiescence },\n    }));\n    if (evaluation >= recordEvaluation) {\n      recordEvaluation = evaluation;\n      recordMove = move;\n    }\n  }\n\n  if (recordMove === undefined) {\n    throw new Error('no available moves');\n  }\n\n  return recordMove;\n}\n\n/**\n * Options for the alpha-beta pruning search algorithm\n *\n * @typedef {Object} AlphaBetaOptions\n * @property {number} maxDepth - Maximum depth of the search tree for the alpha-beta pruning algorithm.\n * @property {SearchEvaluationFunction<T, E>} evaluationFunction - The evaluation function to be used for scoring game states.\n * @property {boolean} [quiescence] - Optional flag to enable/disable quiescence search. Defaults to true.\n */\ntype AlphaBetaSearchArguments<T extends Bitboard, E> = {\n  data: {\n    engine: DraughtsEngine<T, E>;\n    alpha: number;\n    beta: number;\n    depth: number;\n  };\n  options: Omit<AlphaBetaOptions<T, E>, 'maxDepth'>;\n};\n\nasync function alphaBetaSearch<T extends Bitboard, E>({\n  data: { engine, alpha, beta, depth },\n  options: { evaluationFunction, quiescence },\n}: AlphaBetaSearchArguments<T, E>) {\n  if (depth === 0)\n    return quiescence\n      ? quiescenceSearch({\n          data: { engine, alpha, beta },\n          options: { evaluationFunction },\n        })\n      : evaluationFunction(engine);\n\n  for (const move of engine.moves) {\n    const next = engine.clone();\n    next.move(move);\n\n    const evaluation = -(await alphaBetaSearch({\n      data: {\n        engine: next,\n        alpha: -beta,\n        beta: -alpha,\n        depth: depth - 1,\n      },\n      options: { evaluationFunction, quiescence: quiescence },\n    }));\n    if (evaluation >= beta) return beta;\n    alpha = Math.max(evaluation, alpha);\n  }\n\n  return alpha;\n}\n\ninterface QuiescenceSearchArguments<T extends Bitboard, E> {\n  data: {\n    engine: DraughtsEngine<T, E>;\n    alpha: number;\n    beta: number;\n  };\n  options: {\n    evaluationFunction: SearchEvaluationFunction<T, E>;\n  };\n}\n\nasync function quiescenceSearch<T extends Bitboard, E>({\n  data: { engine, alpha, beta },\n  options: { evaluationFunction },\n}: QuiescenceSearchArguments<T, E>) {\n  const evaluation = evaluationFunction(engine);\n  if (evaluation >= beta) return beta;\n  alpha = Math.max(evaluation, alpha);\n\n  for (const move of engine.moves) {\n    if (!move.captures) continue;\n    const next = engine.clone();\n    next.move(move);\n\n    const nextEvaluation = -(await quiescenceSearch({\n      data: { engine: next, alpha: -beta, beta: -alpha },\n      options: { evaluationFunction },\n    }));\n\n    if (nextEvaluation >= beta) return beta;\n    alpha = Math.max(nextEvaluation, alpha);\n  }\n\n  return alpha;\n}\n","import { Bitboard, DraughtsEngineMove } from '../core/engine';\nimport { DraughtsComputerStrategyArgs } from './computer';\n\nexport async function random<T extends Bitboard, E>({\n  engine,\n}: DraughtsComputerStrategyArgs<T, E, undefined>): Promise<\n  DraughtsEngineMove<T>\n> {\n  if (engine.moves.length === 0) throw new Error('no valid moves');\n\n  const randomIndex = Math.floor(Math.random() * engine.moves.length);\n  const randomEngineMove = engine.moves[randomIndex];\n\n  return randomEngineMove;\n}\n","import {\n  DraughtsComputerFactory,\n  DraughtsComputer,\n  SearchEvaluationFunction,\n} from '../computer/computer';\nimport { alphaBeta, AlphaBetaOptions } from '../computer/alpha-beta';\nimport { random } from '../computer/random';\nimport { DraughtsEngine, DraughtsPlayer, DraughtsStatus } from '../core/engine';\nimport { EnglishDraughtsEngineStore } from './engine';\nimport { EnglishDraughtsAdapter1D } from './game';\nimport { cardinality } from './utils';\nimport Mask from './mask';\n\nconst statusToPlayer = {\n  [DraughtsStatus.LIGHT_WON]: DraughtsPlayer.LIGHT,\n  [DraughtsStatus.DARK_WON]: DraughtsPlayer.DARK,\n};\n\n/**\n * Evaluation function for the English Draughts game\n *\n * @param {DraughtsEngine<number, EnglishDraughtsEngineStore>} engine - The game engine\n * @returns {number} - Evaluation score for the given position\n */\nexport const evaluate: SearchEvaluationFunction<\n  number,\n  EnglishDraughtsEngineStore\n> = (engine: DraughtsEngine<number, EnglishDraughtsEngineStore>) => {\n  const status = engine.status;\n  if (status !== DraughtsStatus.PLAYING) {\n    if (status === DraughtsStatus.DRAW) return Number.NEGATIVE_INFINITY;\n    return engine.data.player === statusToPlayer[status]\n      ? Number.POSITIVE_INFINITY\n      : Number.NEGATIVE_INFINITY;\n  }\n  return evaluateMiddlegame(engine);\n};\n\nconst PIECE_WEIGHT = 50;\nconst KING_WEIGHT = 77;\nconst BACK_ROW_WEIGHT = 40;\nconst MIDDLE_TWO_RANK_FOUR_FILE_WEIGHT = 25;\nconst MIDDLE_FOUR_RANK_TWO_FILE_WEIGHT = 5;\n\nfunction evaluateMiddlegame(\n  engine: DraughtsEngine<number, EnglishDraughtsEngineStore>\n): number {\n  const player =\n    engine.data.player === DraughtsPlayer.LIGHT\n      ? engine.data.board.light\n      : engine.data.board.dark;\n  const opponent =\n    engine.data.player === DraughtsPlayer.LIGHT\n      ? engine.data.board.dark\n      : engine.data.board.light;\n  const playerKings = player & engine.data.board.king;\n  const opponentKings = opponent & engine.data.board.king;\n\n  const back_row =\n    engine.data.player === DraughtsPlayer.LIGHT ? Mask.RANK_0 : Mask.RANK_7;\n  const opponent_back_row =\n    engine.data.player === DraughtsPlayer.LIGHT ? Mask.RANK_7 : Mask.RANK_0;\n\n  const playerPieces = cardinality(player);\n  const opponentPieces = cardinality(opponent);\n  const playerKingsCount = cardinality(playerKings);\n  const opponentKingsCount = cardinality(opponentKings);\n  const playerBackRowCount = cardinality(player & back_row);\n  const opponentBackRowCount = cardinality(opponent & opponent_back_row);\n  const playerMiddleTwoRankFourFileCount = cardinality(\n    player & Mask.MIDDLE_TWO_RANK_FOUR_FILE\n  );\n  const opponentMiddleTwoRankFourFileCount = cardinality(\n    opponent & Mask.MIDDLE_TWO_RANK_FOUR_FILE\n  );\n  const playerMiddleFourRankTwoFileCount = cardinality(\n    player & Mask.MIDDLE_FOUR_RANK_TWO_FILE\n  );\n  const opponentMiddleFourRankTwoFileCount = cardinality(\n    opponent & Mask.MIDDLE_FOUR_RANK_TWO_FILE\n  );\n\n  return (\n    (playerPieces - opponentPieces) * PIECE_WEIGHT +\n    (playerKingsCount - opponentKingsCount) * KING_WEIGHT +\n    (playerBackRowCount - opponentBackRowCount) * BACK_ROW_WEIGHT +\n    (playerMiddleTwoRankFourFileCount - opponentMiddleTwoRankFourFileCount) *\n      MIDDLE_TWO_RANK_FOUR_FILE_WEIGHT +\n    (playerMiddleFourRankTwoFileCount - opponentMiddleFourRankTwoFileCount) *\n      MIDDLE_FOUR_RANK_TWO_FILE_WEIGHT\n  );\n}\n\nexport type EnglishDraughtsComputer = DraughtsComputer<\n  number,\n  EnglishDraughtsEngineStore\n>;\n\nexport const EnglishDraughtsComputerFactory = {\n  /**\n   * Creates a computer opponent with a random strategy\n   * @returns {EnglishDraughtsComputer} - A computer opponent with a random strategy\n   */\n  random(): EnglishDraughtsComputer {\n    return DraughtsComputerFactory.setup({\n      adapter: EnglishDraughtsAdapter1D,\n      strategy: random<number, EnglishDraughtsEngineStore>,\n      options: undefined,\n    });\n  },\n  /**\n   * Creates a computer opponent with an alpha-beta pruning strategy\n   * @param {Partial<AlphaBetaOptions<number, EnglishDraughtsEngineStore>>} options - Options for the alpha-beta pruning strategy\n   * @returns {EnglishDraughtsComputer} - A computer opponent with an alpha-beta pruning strategy\n   */\n  alphaBeta(\n    options: Partial<AlphaBetaOptions<number, EnglishDraughtsEngineStore>>\n  ): EnglishDraughtsComputer {\n    const withDefaultOptions: AlphaBetaOptions<\n      number,\n      EnglishDraughtsEngineStore\n    > = {\n      maxDepth: options.maxDepth ?? 4,\n      quiescence: options.quiescence ?? true,\n      evaluationFunction: options.evaluationFunction ?? evaluate,\n    };\n\n    return DraughtsComputerFactory.setup({\n      adapter: EnglishDraughtsAdapter1D,\n      strategy: alphaBeta<number, EnglishDraughtsEngineStore>,\n      options: withDefaultOptions,\n    });\n  },\n};\n"],"names":["compareMove","moveA","moveB","formatBoard","board","boardSize","div","str","ref","square","char","DraughtsPlayer","DraughtsGame1D","engine","history","adapter","__publicField","engineMove","move","BITS","EnglishDraughtsBitSquare","index","BIT_MASK","rotRight","value","r","rotation","rotLeft","decomposeBits","split","bit","cardinality","num","BOARD","S","RANK_0","RANK_1","RANK_2","RANK_5","RANK_6","RANK_7","FILE_0","FILE_7","FORWARD_LEFT","FORWARD_RIGHT","BACKWARD_LEFT","BACKWARD_RIGHT","LIGHT_START","DARK_START","MIDDLE_TWO_RANK_FOUR_FILE","MIDDLE_FOUR_RANK_TWO_FILE","Mask","EnglishDraughtsMoveGenerator","args","player","forward","backward","opponent","empty","capture","jumpers","movers","origin","moves","d1","d2","d3","d4","searchStack","searchJump","nextJumps","nextJump","c1","c2","c3","c4","EnglishDraughtsEngineDefaultData","EnglishDraughtsEngineStrategy","store","DraughtsStatus","validMove","generator","jumper","mover","EnglishDraughtsEngineFactory","data","DraughtsEngine","ENGLISH_DRAUGHTS_LAYOUT","SQUARE_TO_REF","squareIndex","EnglishDraughtsAdapter1D","destination","captures","captureRef","adapterMove","engineBoard","position","isLightPiece","isDarkPiece","isKingPiece","EnglishDraughtsDefaultHistory1D","EnglishDraughts","DraughtsComputerFactory","strategy","options","game","alphaBeta","maxDepth","evaluationFunction","quiescence","recordEvaluation","recordMove","next","evaluation","alphaBetaSearch","alpha","beta","depth","quiescenceSearch","nextEvaluation","random","randomIndex","statusToPlayer","evaluate","status","evaluateMiddlegame","PIECE_WEIGHT","KING_WEIGHT","BACK_ROW_WEIGHT","MIDDLE_TWO_RANK_FOUR_FILE_WEIGHT","MIDDLE_FOUR_RANK_TWO_FILE_WEIGHT","playerKings","opponentKings","back_row","opponent_back_row","playerPieces","opponentPieces","playerKingsCount","opponentKingsCount","playerBackRowCount","opponentBackRowCount","playerMiddleTwoRankFourFileCount","opponentMiddleTwoRankFourFileCount","playerMiddleFourRankTwoFileCount","opponentMiddleFourRankTwoFileCount","EnglishDraughtsComputerFactory","withDefaultOptions"],"mappings":"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"}