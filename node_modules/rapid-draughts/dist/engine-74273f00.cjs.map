{"version":3,"file":"engine-74273f00.cjs","sources":["../src/core/engine.ts"],"sourcesContent":["import Long from 'long';\n\nexport enum DraughtsStatus {\n  PLAYING = 'playing',\n  DRAW = 'draw',\n  LIGHT_WON = 'light_won',\n  DARK_WON = 'dark_won',\n}\n\nexport type Bitboard = number | Long;\n\nexport type DraughtsEngineBoard<T extends Bitboard> = {\n  readonly light: T;\n  readonly dark: T;\n  readonly king: T;\n};\n\nexport type DraughtsEngineMove<T extends Bitboard> = {\n  readonly origin: T;\n  readonly destination: T;\n  readonly captures: T;\n};\n\nexport enum DraughtsPlayer {\n  LIGHT = 'light',\n  DARK = 'dark',\n}\n\nexport type DraughtsEngineData<T extends Bitboard, E> = {\n  player: DraughtsPlayer;\n  board: DraughtsEngineBoard<T>;\n  store: E;\n};\n\nexport type DraughtsEngineStrategy<T extends Bitboard, E> = {\n  moves: (engine: DraughtsEngine<T, E>) => DraughtsEngineMove<T>[];\n  status: (engine: DraughtsEngine<T, E>) => DraughtsStatus;\n  isValidMove: (\n    engine: DraughtsEngine<T, E>,\n    move: DraughtsEngineMove<T>\n  ) => boolean;\n  move: (\n    engine: DraughtsEngine<T, E>,\n    move: DraughtsEngineMove<T>\n  ) => DraughtsEngineData<T, E>;\n  serializeStore: (store: E) => E;\n};\n\nexport class DraughtsEngine<T extends Bitboard, E> {\n  data: DraughtsEngineData<T, E>;\n\n  private strategy: DraughtsEngineStrategy<T, E>;\n\n  private _moves: DraughtsEngineMove<T>[] | undefined;\n  private _status: DraughtsStatus | undefined;\n\n  constructor(\n    data: DraughtsEngineData<T, E>,\n    strategy: DraughtsEngineStrategy<T, E>\n  ) {\n    this.data = data;\n    this.strategy = strategy;\n  }\n\n  /**\n   * Returns the current game status\n   */\n  get status(): DraughtsStatus {\n    return (this._status ??= this.strategy.status(this));\n  }\n\n  /**\n   * Returns the available moves\n   */\n  get moves(): DraughtsEngineMove<T>[] {\n    return (this._moves ??= this.strategy.moves(this));\n  }\n\n  /**\n   * Clones the current engine instance\n   * @returns A new cloned engine instance\n   */\n  clone(): DraughtsEngine<T, E> {\n    return new DraughtsEngine(this.serialize(), this.strategy);\n  }\n\n  /**\n   * Serializes the engine data\n   * @returns The serialized engine data\n   */\n  serialize(): DraughtsEngineData<T, E> {\n    return {\n      board: { ...this.data.board },\n      store: this.strategy.serializeStore(this.data.store),\n      player: this.data.player,\n    };\n  }\n\n  move(move: DraughtsEngineMove<T>): void {\n    this.data = this.strategy.move(this, move);\n    this._moves = undefined;\n    this._status = undefined;\n  }\n\n  isValidMove(move: DraughtsEngineMove<T>): boolean {\n    return this.strategy.isValidMove(this, move);\n  }\n}\n"],"names":["DraughtsStatus","DraughtsPlayer","DraughtsEngine","data","strategy","__publicField","move"],"mappings":"qLAEY,IAAAA,GAAAA,IACVA,EAAA,QAAU,UACVA,EAAA,KAAO,OACPA,EAAA,UAAY,YACZA,EAAA,SAAW,WAJDA,IAAAA,GAAA,CAAA,CAAA,EAqBAC,GAAAA,IACVA,EAAA,MAAQ,QACRA,EAAA,KAAO,OAFGA,IAAAA,GAAA,CAAA,CAAA,EAyBL,MAAMC,CAAsC,CAQjD,YACEC,EACAC,EACA,CAVFC,EAAA,aAEQA,EAAA,iBAEAA,EAAA,eACAA,EAAA,gBAMN,KAAK,KAAOF,EACZ,KAAK,SAAWC,CAClB,CAKA,IAAI,QAAyB,CAC3B,OAAQ,KAAK,UAAL,KAAK,QAAY,KAAK,SAAS,OAAO,IAAI,EACpD,CAKA,IAAI,OAAiC,CACnC,OAAQ,KAAK,SAAL,KAAK,OAAW,KAAK,SAAS,MAAM,IAAI,EAClD,CAMA,OAA8B,CAC5B,OAAO,IAAIF,EAAe,KAAK,UAAU,EAAG,KAAK,QAAQ,CAC3D,CAMA,WAAsC,CAC7B,MAAA,CACL,MAAO,CAAE,GAAG,KAAK,KAAK,KAAM,EAC5B,MAAO,KAAK,SAAS,eAAe,KAAK,KAAK,KAAK,EACnD,OAAQ,KAAK,KAAK,MAAA,CAEtB,CAEA,KAAKI,EAAmC,CACtC,KAAK,KAAO,KAAK,SAAS,KAAK,KAAMA,CAAI,EACzC,KAAK,OAAS,OACd,KAAK,QAAU,MACjB,CAEA,YAAYA,EAAsC,CAChD,OAAO,KAAK,SAAS,YAAY,KAAMA,CAAI,CAC7C,CACF"}