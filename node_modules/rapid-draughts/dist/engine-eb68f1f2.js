var r = Object.defineProperty;
var o = (t, s, e) => s in t ? r(t, s, { enumerable: !0, configurable: !0, writable: !0, value: e }) : t[s] = e;
var a = (t, s, e) => (o(t, typeof s != "symbol" ? s + "" : s, e), e);
var h = /* @__PURE__ */ ((t) => (t.PLAYING = "playing", t.DRAW = "draw", t.LIGHT_WON = "light_won", t.DARK_WON = "dark_won", t))(h || {}), d = /* @__PURE__ */ ((t) => (t.LIGHT = "light", t.DARK = "dark", t))(d || {});
class i {
  constructor(s, e) {
    a(this, "data");
    a(this, "strategy");
    a(this, "_moves");
    a(this, "_status");
    this.data = s, this.strategy = e;
  }
  /**
   * Returns the current game status
   */
  get status() {
    return this._status ?? (this._status = this.strategy.status(this));
  }
  /**
   * Returns the available moves
   */
  get moves() {
    return this._moves ?? (this._moves = this.strategy.moves(this));
  }
  /**
   * Clones the current engine instance
   * @returns A new cloned engine instance
   */
  clone() {
    return new i(this.serialize(), this.strategy);
  }
  /**
   * Serializes the engine data
   * @returns The serialized engine data
   */
  serialize() {
    return {
      board: { ...this.data.board },
      store: this.strategy.serializeStore(this.data.store),
      player: this.data.player
    };
  }
  move(s) {
    this.data = this.strategy.move(this, s), this._moves = void 0, this._status = void 0;
  }
  isValidMove(s) {
    return this.strategy.isValidMove(this, s);
  }
}
export {
  h as D,
  d as a,
  i as b
};
//# sourceMappingURL=engine-eb68f1f2.js.map
